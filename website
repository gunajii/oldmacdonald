<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Digital Farm Management Portal</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }
        .modal-content {
            background-color: #ffffff;
            margin: 15% auto;
            padding: 24px;
            border-radius: 1rem;
            max-width: 90%;
            width: 500px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);
        }
    </style>
</head>
<body class="p-4 sm:p-8">

    <!-- Firebase Configuration & Global Variables -->
    <script type="text/javascript">
        // These global variables are provided by the platform. Do not change.
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
    </script>

    <!-- Firebase CDN Imports -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, addDoc, onSnapshot, collection, query, orderBy, serverTimestamp, setDoc, updateDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables for Firebase services
        let db;
        let auth;
        let userId;

        // MRL Sample Data (for demonstration purposes)
        const MRL_DATABASE = {
            'Oxytetracycline': {
                'cattle': {
                    'milk': { withdrawalHours: 96 } // 4 days
                },
                'poultry': {
                    'meat': { withdrawalHours: 72 } // 3 days
                }
            }
        };

        // UI Element References
        const app = document.getElementById('app');
        const loginSection = document.getElementById('loginSection');
        const dashboardSection = document.getElementById('dashboardSection');
        const treatmentForm = document.getElementById('treatmentForm');
        const animalListContainer = document.getElementById('animalList');
        const warningList = document.getElementById('warningList');
        const addAnimalForm = document.getElementById('addAnimalForm');
        const modal = document.getElementById('modal');
        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');
        const modalCloseBtn = document.getElementById('modalCloseBtn');
        const userIdDisplay = document.getElementById('userIdDisplay');

        // Modal Functionality
        function showModal(title, message) {
            modalTitle.textContent = title;
            modalBody.textContent = message;
            modal.style.display = 'block';
        }

        modalCloseBtn.addEventListener('click', () => {
            modal.style.display = 'none';
        });

        // Initialize Firebase and Auth
        async function initializeAppAndAuth() {
            try {
                const firebaseApp = initializeApp(firebaseConfig);
                auth = getAuth(firebaseApp);
                db = getFirestore(firebaseApp);

                // Sign in using the custom token if available, otherwise sign in anonymously
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }

                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        userIdDisplay.textContent = `User ID: ${userId}`;
                        console.log("User signed in with ID:", userId);
                        showDashboard();
                        setupListeners();
                    } else {
                        console.log("User signed out.");
                        showLogin();
                    }
                });
            } catch (error) {
                console.error("Error during Firebase initialization or sign-in:", error);
                showModal('Initialization Error', `Could not initialize Firebase: ${error.message}`);
            }
        }

        function showDashboard() {
            loginSection.classList.add('hidden');
            dashboardSection.classList.remove('hidden');
        }

        function showLogin() {
            loginSection.classList.remove('hidden');
            dashboardSection.classList.add('hidden');
        }

        // Firestore Logic
        function getAnimalsCollection() {
            return collection(db, `artifacts/${appId}/users/${userId}/animals`);
        }

        async function addAnimal(animalData) {
            try {
                await addDoc(getAnimalsCollection(), {
                    ...animalData,
                    createdAt: serverTimestamp()
                });
                showModal('Success', `Animal with ID ${animalData.tagId} added successfully!`);
                addAnimalForm.reset();
            } catch (error) {
                console.error("Error adding animal: ", error);
                showModal('Error', `Failed to add animal: ${error.message}`);
            }
        }

        async function logTreatment(treatmentData) {
            try {
                const animalDocRef = doc(db, `artifacts/${appId}/users/${userId}/animals/${treatmentData.animalId}`);
                const animalDoc = await getDoc(animalDocRef);

                if (!animalDoc.exists()) {
                    showModal('Error', 'Animal not found. Please check the Animal ID.');
                    return;
                }

                const animal = animalDoc.data();
                const animalSpecies = animal.species.toLowerCase();
                const product = treatmentData.product.toLowerCase();
                const drug = treatmentData.drug.toLowerCase();

                const withdrawalData = MRL_DATABASE[drug]?.[animalSpecies]?.[product];

                let withdrawalEndTimestamp = null;
                if (withdrawalData) {
                    const withdrawalHours = withdrawalData.withdrawalHours;
                    const now = new Date();
                    const withdrawalEndDate = new Date(now.getTime() + withdrawalHours * 60 * 60 * 1000);
                    withdrawalEndTimestamp = withdrawalEndDate.toISOString();
                }
                
                // Add the new treatment to the animal's treatments array
                const newTreatment = {
                    drug: treatmentData.drug,
                    dosage: treatmentData.dosage,
                    reason: treatmentData.reason,
                    withdrawalEnd: withdrawalEndTimestamp,
                    treatedAt: serverTimestamp(),
                    product: treatmentData.product
                };

                await updateDoc(animalDocRef, {
                    treatments: [...(animal.treatments || []), newTreatment]
                });

                showModal('Success', `Treatment logged for Animal ID ${treatmentData.animalId}. Withdrawal ends at ${new Date(withdrawalEndTimestamp).toLocaleString()}.`);
                treatmentForm.reset();
            } catch (error) {
                console.error("Error logging treatment:", error);
                showModal('Error', `Failed to log treatment: ${error.message}`);
            }
        }

        function setupListeners() {
            // Listen for real-time updates to the animals collection
            onSnapshot(getAnimalsCollection(), (querySnapshot) => {
                const animals = [];
                const warnings = [];
                querySnapshot.forEach((doc) => {
                    const animalData = { id: doc.id, ...doc.data() };
                    animals.push(animalData);
                    
                    if (animalData.treatments && animalData.treatments.length > 0) {
                        const latestTreatment = animalData.treatments[animalData.treatments.length - 1];
                        if (latestTreatment.withdrawalEnd) {
                            const withdrawalDate = new Date(latestTreatment.withdrawalEnd);
                            if (withdrawalDate > new Date()) {
                                warnings.push({ animal: animalData, latestTreatment, withdrawalDate });
                            }
                        }
                    }
                });
                renderAnimalList(animals);
                renderWarnings(warnings);
            });
        }

        function renderAnimalList(animals) {
            animalListContainer.innerHTML = '';
            if (animals.length === 0) {
                animalListContainer.innerHTML = '<p class="text-gray-500">No animals registered yet.</p>';
            } else {
                animals.forEach(animal => {
                    const animalCard = document.createElement('div');
                    animalCard.className = 'bg-white p-4 rounded-lg shadow-sm border border-gray-200';
                    animalCard.innerHTML = `
                        <h3 class="font-bold text-lg text-gray-800">Animal ID: ${animal.tagId}</h3>
                        <p class="text-sm text-gray-600">Species: ${animal.species}</p>
                        <p class="text-sm text-gray-600">Owner: ${animal.ownerName}</p>
                        <p class="text-sm text-gray-600">Registered: ${animal.createdAt ? new Date(animal.createdAt.seconds * 1000).toLocaleDateString() : 'N/A'}</p>
                    `;
                    animalListContainer.appendChild(animalCard);
                });
            }
        }

        function renderWarnings(warnings) {
            warningList.innerHTML = '';
            if (warnings.length === 0) {
                warningList.innerHTML = '<p class="text-gray-500">No animals in withdrawal period.</p>';
            } else {
                warnings.forEach(warning => {
                    const warningCard = document.createElement('div');
                    warningCard.className = 'bg-red-100 p-4 rounded-lg shadow-sm border border-red-300 text-red-800';
                    warningCard.innerHTML = `
                        <h3 class="font-bold text-lg">⚠️ Withdrawal Alert: Animal ID ${warning.animal.tagId}</h3>
                        <p class="text-sm">Last Treated With: ${warning.latestTreatment.drug}</p>
                        <p class="text-sm">Product: ${warning.latestTreatment.product}</p>
                        <p class="text-sm">Safe to use after: ${warning.withdrawalDate.toLocaleString()}</p>
                    `;
                    warningList.appendChild(warningCard);
                });
            }
        }

        // Event Listeners for Forms
        addAnimalForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const tagId = document.getElementById('tagId').value;
            const species = document.getElementById('species').value;
            const ownerName = document.getElementById('ownerName').value;
            addAnimal({ tagId, species, ownerName });
        });

        treatmentForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const animalId = document.getElementById('treatmentAnimalId').value;
            const drug = document.getElementById('drug').value;
            const dosage = document.getElementById('dosage').value;
            const reason = document.getElementById('reason').value;
            const product = document.getElementById('product').value;
            logTreatment({ animalId, drug, dosage, reason, product });
        });

        // Initialize the app on window load
        window.onload = initializeAppAndAuth;

    </script>

    <!-- Header -->
    <header class="bg-white p-4 rounded-xl shadow-md mb-8 flex flex-col sm:flex-row justify-between items-center">
        <h1 class="text-2xl sm:text-3xl font-bold text-blue-600">Farm Portal</h1>
        <p id="userIdDisplay" class="text-gray-500 text-sm mt-2 sm:mt-0"></p>
    </header>

    <!-- Main Content Sections -->
    <main id="app">
        <!-- Login Section (Initially visible) -->
        <section id="loginSection" class="flex items-center justify-center h-[70vh]">
            <div class="p-8 bg-white rounded-xl shadow-lg text-center">
                <h2 class="text-xl font-semibold mb-4 text-gray-700">Please Wait...</h2>
                <p class="text-gray-500">Initializing the application and user authentication.</p>
            </div>
        </section>

        <!-- Dashboard Section (Initially hidden) -->
        <section id="dashboardSection" class="hidden">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Dashboard</h2>

            <!-- MRL Warnings -->
            <div class="mb-8">
                <h3 class="text-xl font-semibold text-gray-800 mb-2 flex items-center">
                    <span class="mr-2">MRL Warnings</span>
                    <span class="bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full">LIVE</span>
                </h3>
                <div id="warningList" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Warnings will be rendered here by JavaScript -->
                </div>
            </div>

            <!-- Forms Container -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Add New Animal Form -->
                <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Register New Animal</h3>
                    <form id="addAnimalForm" class="space-y-4">
                        <div>
                            <label for="tagId" class="block text-sm font-medium text-gray-700">Animal Tag ID (NDLM)</label>
                            <input type="text" id="tagId" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., IN0012345678" required>
                        </div>
                        <div>
                            <label for="species" class="block text-sm font-medium text-gray-700">Species</label>
                            <select id="species" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" required>
                                <option value="cattle">Cattle</option>
                                <option value="poultry">Poultry</option>
                            </select>
                        </div>
                        <div>
                            <label for="ownerName" class="block text-sm font-medium text-gray-700">Owner Name</label>
                            <input type="text" id="ownerName" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="Owner Name" required>
                        </div>
                        <button type="submit" class="w-full bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">Register Animal</button>
                    </form>
                </div>

                <!-- Log Treatment Form -->
                <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Log a Treatment</h3>
                    <form id="treatmentForm" class="space-y-4">
                        <div>
                            <label for="treatmentAnimalId" class="block text-sm font-medium text-gray-700">Animal Firestore ID</label>
                            <input type="text" id="treatmentAnimalId" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., uL9pL3xYdM2jN5iK8o" required>
                            <p class="text-xs text-gray-500 mt-1">
                                (For this demo, please copy the Firestore ID from the animal document in the Firebase console.)
                            </p>
                        </div>
                        <div>
                            <label for="drug" class="block text-sm font-medium text-gray-700">Antimicrobial Drug</label>
                            <select id="drug" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" required>
                                <option value="Oxytetracycline">Oxytetracycline</option>
                            </select>
                        </div>
                        <div>
                            <label for="dosage" class="block text-sm font-medium text-gray-700">Dosage</label>
                            <input type="text" id="dosage" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., 20mg/kg" required>
                        </div>
                        <div>
                            <label for="reason" class="block text-sm font-medium text-gray-700">Reason for Use</label>
                            <input type="text" id="reason" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., Treatment for fever" required>
                        </div>
                        <div>
                            <label for="product" class="block text-sm font-medium text-gray-700">Product for MRL</label>
                            <select id="product" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" required>
                                <option value="milk">Milk</option>
                                <option value="meat">Meat</option>
                            </select>
                        </div>
                        <button type="submit" class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">Log Treatment</button>
                    </form>
                </div>
            </div>

            <!-- Animal List -->
            <div class="mt-8">
                <h3 class="text-xl font-semibold text-gray-800 mb-2">My Registered Animals</h3>
                <div id="animalList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <!-- Animal cards will be rendered here by JavaScript -->
                </div>
            </div>
        </section>

    </main>
    
    <!-- Custom Modal -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <h4 id="modalTitle" class="text-xl font-bold mb-4 text-gray-800"></h4>
            <p id="modalBody" class="text-gray-700"></p>
            <button id="modalCloseBtn" class="mt-6 w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">Close</button>
        </div>
    </div>
</body>
</html>
